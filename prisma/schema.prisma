generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // provider = "sqlite"
  // url      = "file:./dev.db"
}

model Role {
  id         Int      @id @unique @default(autoincrement())
  rol_name   String
  is_deleted Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  users      User[]
}

model User {
  id         Int       @id @unique @default(autoincrement())
  password   String
  email      String    @unique
  roleId     Int?      @default(2)
  is_active  Boolean?  @default(true)
  is_deleted Boolean?  @default(false)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  role       Role?     @relation(fields: [roleId], references: [id])
  personas   Persona[]
}

model Persona {
  id                  Int        @id @unique @default(autoincrement())
  nombres             String
  a_paterno           String
  a_materno           String
  n_control           String     @unique
  telefono            String
  whatsapp            String
  email_institucional String     @unique
  campus              Int
  semestre            Int?
  carreraId           Int
  userId              Int        @unique
  imagenesId          Int?       @unique
  cafeteriaId         Int?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  user                User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  becarios            Becario[]
  profile_picture     Imagen?    @relation(fields: [imagenesId], references: [id])
  carrera             Carrera    @relation(fields: [carreraId], references: [id])
  cafeteria           Cafeteria? @relation(fields: [cafeteriaId], references: [id])
}

model Carrera {
  id        Int       @id @unique @default(autoincrement())
  nombre    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  becarios  Persona[]
}

model Becario {
  id              Int      @id @unique @default(autoincrement())
  turno           String
  semana_cobro    String
  en_lista_espera Boolean? @default(false)
  puede_cobrar    Boolean? @default(false)
  personaId       Int      @unique
  becaId          Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  persona         Persona  @relation(fields: [personaId], references: [id], onDelete: Cascade)
  beca            Beca?    @relation(fields: [becaId], references: [id], onDelete: SetNull)
  cobros          Cobro[]
}

model Beca {
  id          Int       @id @unique @default(autoincrement())
  nombre      String
  inicia      DateTime
  termina     DateTime?
  descripcion String
  is_active   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  becarios    Becario[]
}

model Cobro {
  id           Int        @id @unique @default(autoincrement())
  becarioId    Int
  concepto     String
  codigo_cobro String     @unique
  codigo_usado Boolean?   @default(false)
  was_forced   Boolean?   @default(false)
  forma_cobro  String?
  fecha_cobro  DateTime
  cafeteriaId  Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  becario      Becario    @relation(fields: [becarioId], references: [id])
  cafeteria    Cafeteria? @relation(fields: [cafeteriaId], references: [id])
}

model Cafeteria {
  id        Int       @id @unique @default(autoincrement())
  nombre    String
  direccion String?
  campus    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  cobros    Cobro[]
  cajeros   Persona[]
}

model Imagen {
  id          Int       @id @unique @default(autoincrement())
  titulo      String?
  descripcion String?
  url         String
  problemasId Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  personas    Persona[]
  problema    Problema? @relation(fields: [problemasId], references: [id])
}

model Problema {
  id          Int      @id @unique @default(autoincrement())
  titulo      String
  descripcion String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imagenes    Imagen[]
}

model Settings {
  id        Int      @id @unique @default(autoincrement())
  nombre    String   @unique
  valor     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
